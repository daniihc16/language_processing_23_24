/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import java.util.*;


public class alike implements alikeConstants {
   //...
   public static SymbolTable st = new SymbolTable();
   public static void main(String[] args) {
           alike parser = null;

           try {
                   if(args.length == 0) {
                           parser = new alike(System.in);
                   }
                   else {
                           parser = new alike(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el símbolo inicial de la gramática
                   parser.Programa();
                   //...
                   System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
           }
           catch (java.io.FileNotFoundException e) {
                   System.err.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                   System.err.println("LEX_ERROR: " + e.getMessage());
           }
           catch (ParseException e) {
                        System.err.println("PARSE_ERROR: " + e.getMessage());
           }
           //...
   }

  static final public void boolconst() throws ParseException {
    trace_call("boolconst");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tTRUE:{
        jj_consume_token(tTRUE);
        break;
        }
      case tFALSE:{
        jj_consume_token(tFALSE);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("boolconst");
    }
}

// Devuelve el array con los símbolos de los identificadores con su tipo
// @param ids: lista de identificadores a los que se les va a asignar un tipo
// @param ref: token que indica si el tipo es por referencia
  static final public ArrayList<Symbol> tipo_dato(ArrayList<String> ids, boolean isRef) throws ParseException {
    trace_call("tipo_dato");
    try {
ArrayList<Symbol> t;
        Token neg1 = null, neg2 = null, min, max;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCHAR:
      case tBOOL:
      case tINT:{
        t = tipo_base(ids, isRef);
{if ("" != null) return t;}
        break;
        }
      case tARRAY:{
        jj_consume_token(tARRAY);
        jj_consume_token(tAPAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tMINUS:{
          neg1 = jj_consume_token(tMINUS);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        min = jj_consume_token(tINTCONST);
        jj_consume_token(tRANGE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tMINUS:{
          neg2 = jj_consume_token(tMINUS);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        max = jj_consume_token(tINTCONST);
        jj_consume_token(tCPAR);
        jj_consume_token(tOF);
        t = tipo_base(ids, isRef);
Symbol.ParameterClass p_class = isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL;
                int minInd = Integer.parseInt(min.image);
                int maxInd = Integer.parseInt(max.image);
                if (neg1 != null) minInd = minInd*(-1);
                if (neg2 != null) maxInd = maxInd*(-1);
                ArrayList<Symbol> ids_con_tipo = new ArrayList<Symbol>();
                for (int i=0; i<ids.size(); i++) {
                        ids_con_tipo.add(new SymbolArray(ids.get(i), minInd, maxInd, t.get(i).type, p_class));
                }
                {if ("" != null) return ids_con_tipo;}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_dato");
    }
}

// Devuelve el array con los símbolos de los identificadores con su tipo
// @param ids: lista de identificadores a los que se les va a asignar un tipo
// @param isRef: indica si el tipo es por referencia
  static final public ArrayList<Symbol> tipo_base(ArrayList<String> ids, boolean isRef) throws ParseException {
    trace_call("tipo_base");
    try {
Symbol t;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCHAR:{
        jj_consume_token(tCHAR);
t = new SymbolChar("");
        break;
        }
      case tBOOL:{
        jj_consume_token(tBOOL);
t = new SymbolBool("");
        break;
        }
      case tINT:{
        jj_consume_token(tINT);
t = new SymbolInt("");
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
ArrayList<Symbol> ids_symbols = new ArrayList<Symbol>();
                Symbol.ParameterClass p_class = isRef ? Symbol.ParameterClass.REF : Symbol.ParameterClass.VAL;
                for (String id : ids) {
                        Symbol t_clone = t.clone();
                        t_clone.name = id;
                        t_clone.parClass = p_class;
                        ids_symbols.add(t_clone);
                }
                {if ("" != null) return ids_symbols;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo_base");
    }
}

  static final public void tipo_constante() throws ParseException {
    trace_call("tipo_constante");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCHARCONST:{
        jj_consume_token(tCHARCONST);
        break;
        }
      case tINTCONST:{
        jj_consume_token(tINTCONST);
        break;
        }
      case tTRUE:
      case tFALSE:{
        boolconst();
        break;
        }
      case tSTRING:{
        jj_consume_token(tSTRING);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo_constante");
    }
}

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void Programa() throws ParseException {
    trace_call("Programa");
    try {
SymbolProcedure proc_main = new SymbolProcedure("__NOT_A_PROCEDURE__", new ArrayList<Symbol>());
        ArrayList<Symbol> vars = null;
      try {
        proc_main = cabecera_procedimiento();
st.insertSymbol(proc_main);
                System.out.println("Nuevo s\u00edmbolo: " + st.toString());
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          vars = declaracion_variables();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          ;
        }
if (vars != null) {
                                for (Symbol var : vars) {
                                        try{
                                                st.insertSymbol(var);
                                        } catch (AlreadyDefinedSymbolException ads){
                                                System.err.println("SEMANTIC_ERROR: Error definiendo nuevo procedimiento" + ads.getMessage(proc_main) + ": Par\u00e1metro ya declarado");
                                        }
                                }
                        } else {
                                vars = new ArrayList<Symbol>();
                        }
                        System.out.println("Nuevo s\u00edmbolo: " + st.toString());
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPROC:
        case tFUNC:{
          declaracion_procs_funcs();
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(tBEGIN);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tNULL:
          case tRETURN:
          case tCHARCONST:
          case tINTCONST:
          case tTRUE:
          case tFALSE:
          case tSTRING:
          case tAPAR:
          case tSKIPLINE:
          case tGET:
          case tPUTLINE:
          case tPUT:
          case tINT2CHAR:
          case tCHAR2INT:
          case tIF:
          case tWHILE:
          case tID:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_1;
          }
          instruccion();
        }
        jj_consume_token(tEND);
        jj_consume_token(tPC);
        jj_consume_token(0);
      } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
      } catch (AlreadyDefinedSymbolException ads) {
System.err.println("SEMANTIC_ERROR: " + ads.getMessage(proc_main));
      }
    } finally {
      trace_return("Programa");
    }
}

  static final public ArrayList<Symbol> declaracion_variables() throws ParseException {
    trace_call("declaracion_variables");
    try {
ArrayList<Symbol> vars = new ArrayList<Symbol>();
        ArrayList<Symbol> var_list = null;
      label_2:
      while (true) {
        var_list = declaracion_var();
for (Symbol var: var_list) vars.add(var);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_2;
        }
      }
{if ("" != null) return vars;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_variables");
    }
}

  static final public ArrayList<Symbol> declaracion_var() throws ParseException {
    trace_call("declaracion_var");
    try {
ArrayList<String> ids;
        ArrayList<Symbol> vars;
      try {
        // tipo_dato devuelve el símbolo 
                        ids = lista_ids();
        jj_consume_token(tDP);
        vars = tipo_dato(ids, false);
        jj_consume_token(tPC);
{if ("" != null) return vars;}
      } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_var");
    }
}

  static final public void declaracion_procs_funcs() throws ParseException {
    trace_call("declaracion_procs_funcs");
    try {

      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPROC:{
          declaracion_proc();
          break;
          }
        case tFUNC:{
          declaracion_func();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPROC:
        case tFUNC:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_3;
        }
      }
    } finally {
      trace_return("declaracion_procs_funcs");
    }
}

// Reconoce la declaración de un procedimiento
// Inserta el símbolo del procedimiento en la tabla de símbolos
// Inserta bloque en la tabla de símbolos
// Inserta los parámetros y variables en la tabla de símbolos
  static final public void declaracion_proc() throws ParseException {
    trace_call("declaracion_proc");
    try {
SymbolProcedure proc = new SymbolProcedure("__NOT_A_PROCEDURE__", new ArrayList<Symbol>());
        ArrayList<Symbol> vars = null;
      try {
        proc = cabecera_procedimiento();
st.insertSymbol(proc);
                        st.insertBlock();
                        for (Symbol param : proc.parList) {
                                try {
                                        st.insertSymbol(param);
                                } catch (AlreadyDefinedSymbolException ads) {
                                        System.err.println("SEMANTIC_ERROR: Error definiendo nuevo procedimiento" + ads.getMessage(proc) + ": Par\u00e1metro ya declarado");
                                }
                        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          vars = declaracion_variables();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          ;
        }
if (vars != null) {
                                for (Symbol var : vars) {
                                        try{
                                                st.insertSymbol(var);
                                        } catch (AlreadyDefinedSymbolException ads){
                                                System.err.println("SEMANTIC_ERROR: Error definiendo nuevo variable" + ads.getMessage(proc) + ": Variable ya declarado");
                                        }

                                }
                        } else {
                                vars = new ArrayList<Symbol>();
                        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPROC:
        case tFUNC:{
          declaracion_procs_funcs();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(tBEGIN);
        label_4:
        while (true) {
          instruccion();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tNULL:
          case tRETURN:
          case tCHARCONST:
          case tINTCONST:
          case tTRUE:
          case tFALSE:
          case tSTRING:
          case tAPAR:
          case tSKIPLINE:
          case tGET:
          case tPUTLINE:
          case tPUT:
          case tINT2CHAR:
          case tCHAR2INT:
          case tIF:
          case tWHILE:
          case tID:{
            ;
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            break label_4;
          }
        }
        jj_consume_token(tEND);
        jj_consume_token(tPC);
      } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
      } catch (AlreadyDefinedSymbolException ads) {
System.err.println("SEMANTIC_ERROR: Error definiendo nuevo procedimiento" + ads.getMessage(proc) + ": Procedimiento o par\u00e1metros ya declarados");
      }
    } finally {
      trace_return("declaracion_proc");
    }
}

// Reconoce la declaración de una función
// Inserta el símbolo de la función en la tabla de símbolos
// Inserta bloque en la tabla de símbolos
// Inserta los parámetros y variables en la tabla de símbolos
  static final public void declaracion_func() throws ParseException {
    trace_call("declaracion_func");
    try {
ArrayList<Symbol> vars = null;
        SymbolFunction func = new SymbolFunction("__NOT_A_FUNCTION__", new ArrayList<Symbol>(), Symbol.Types.UNDEFINED);
      try {
        func = cabecera_funcion();
try {
                                st.insertSymbol(func);
                        } catch (AlreadyDefinedSymbolException ads) {
                                System.err.println("SEMANTIC_ERROR: Error definiendo nueva funci\u00f3n" + ads.getMessage(func) + ": Funci\u00f3n ya declarada");
                        }
                        st.insertBlock();
                        for (Symbol param : func.parList) {
                                try {
                                        st.insertSymbol(param);
                                } catch (AlreadyDefinedSymbolException ads) {
                                        System.err.println("SEMANTIC_ERROR: Error definiendo nueva funci\u00f3n" + ads.getMessage(func) + ": Par\u00e1metro ya declarado");
                                }
                        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          vars = declaracion_variables();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
if (vars != null) {
                                for (Symbol var : vars) {
                                        try{
                                                st.insertSymbol(var);
                                        } catch (AlreadyDefinedSymbolException ads){
                                                System.err.println("SEMANTIC_ERROR: Error definiendo nueva funcion" + ads.getMessage(func) + ": Variable ya declarada");
                                        }

                                }
                        } else {
                                vars = new ArrayList<Symbol>();
                        }
        jj_consume_token(tBEGIN);
        label_5:
        while (true) {
          instruccion();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tNULL:
          case tRETURN:
          case tCHARCONST:
          case tINTCONST:
          case tTRUE:
          case tFALSE:
          case tSTRING:
          case tAPAR:
          case tSKIPLINE:
          case tGET:
          case tPUTLINE:
          case tPUT:
          case tINT2CHAR:
          case tCHAR2INT:
          case tIF:
          case tWHILE:
          case tID:{
            ;
            break;
            }
          default:
            jj_la1[16] = jj_gen;
            break label_5;
          }
        }
        jj_consume_token(tEND);
        jj_consume_token(tPC);
st.removeBlock();
      } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
      }
    } finally {
      trace_return("declaracion_func");
    }
}

  static final public ArrayList<Symbol> declaracion_param() throws ParseException {
    trace_call("declaracion_param");
    try {
ArrayList<String> ids;
        ArrayList<Symbol> ids_con_tipo;
        Token ref = null;
      ids = lista_ids();
      jj_consume_token(tDP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tREF:{
        ref = jj_consume_token(tREF);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      ids_con_tipo = tipo_dato(ids, ref != null);
{if ("" != null) return ids_con_tipo;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion_param");
    }
}

  static final public ArrayList<String> lista_ids() throws ParseException {
    trace_call("lista_ids");
    try {
ArrayList<String> ids = new ArrayList<String>();
        ArrayList<String> resto_ids = null;
        Token id;
      if (jj_2_1(2)) {
        id = jj_consume_token(tID);
        jj_consume_token(tCOMA);
        resto_ids = lista_ids();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          id = jj_consume_token(tID);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
if (!st.containsSymbol(id.image)) {
                ids.add(id.image);
        } else {
                System.err.println(id.image + " ya est\u00e1 definido");
        }
        if (resto_ids != null) {
                for (String sid : resto_ids) ids.add(sid);
        }
        {if ("" != null) return ids;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_ids");
    }
}

// Devuelve el símbolo del procedimiento con los parámetros
  static final public SymbolProcedure cabecera_procedimiento() throws ParseException {
    trace_call("cabecera_procedimiento");
    try {
Token id_proc;
        ArrayList<Symbol> proc_params = null;
      jj_consume_token(tPROC);
      id_proc = jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAPAR:
      case 62:{
        proc_params = parametros_formales();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(tIS);
{if ("" != null) return new SymbolProcedure(id_proc.image, proc_params);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("cabecera_procedimiento");
    }
}

// Devuelve el símbolo de la función con los parámetros
  static final public SymbolFunction cabecera_funcion() throws ParseException {
    trace_call("cabecera_funcion");
    try {
Token id_func;
        ArrayList<Symbol> func_params = null;
        ArrayList<Symbol> returnType = null;
      jj_consume_token(tFUNC);
      id_func = jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAPAR:
      case 62:{
        func_params = parametros_formales();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(tRETURN);
      returnType = tipo_dato(new ArrayList<String>(Arrays.asList("returnType")), false);
      jj_consume_token(tIS);
{if ("" != null) return new SymbolFunction(id_func.image, func_params, returnType.get(0).type);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("cabecera_funcion");
    }
}

  static final public ArrayList<Symbol> parametros_formales() throws ParseException {
    trace_call("parametros_formales");
    try {
ArrayList<Symbol> params = new ArrayList<Symbol>();
        ArrayList<Symbol> ps, resto_p;
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAPAR:{
          jj_consume_token(tAPAR);
          ps = declaracion_param();
for (Symbol p :  ps) params.add(p);
          resto_p = lista_parametros_formales();
for (Symbol p :  resto_p) params.add(p);
          jj_consume_token(tCPAR);
          break;
          }
        case 62:{
          jj_consume_token(62);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
      }
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametros_formales");
    }
}

  static final public ArrayList<Symbol> lista_parametros_formales() throws ParseException {
    trace_call("lista_parametros_formales");
    try {
ArrayList<Symbol> params = new ArrayList<Symbol>();
        ArrayList<Symbol> ps, resto_p;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPC:{
        jj_consume_token(tPC);
        ps = declaracion_param();
for (Symbol p :  ps) params.add(p);
        resto_p = lista_parametros_formales();
for (Symbol p :  resto_p) params.add(p);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
{if ("" != null) return params;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros_formales");
    }
}

  static final public void instruccion() throws ParseException {
    trace_call("instruccion");
    try {

      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tGET:{
          inst_leer();
          break;
          }
        case tSKIPLINE:{
          jj_consume_token(tSKIPLINE);
          break;
          }
        case tPUT:{
          inst_escribir();
          break;
          }
        case tPUTLINE:{
          inst_escribir_linea();
          break;
          }
        case tCHARCONST:
        case tINTCONST:
        case tTRUE:
        case tFALSE:
        case tSTRING:
        case tAPAR:
        case tINT2CHAR:
        case tCHAR2INT:
        case tID:{
          inst_invocacion_o_asignacion();
          break;
          }
        case tIF:{
          inst_if();
          break;
          }
        case tWHILE:{
          inst_while();
          break;
          }
        case tRETURN:{
          inst_return();
          break;
          }
        case tNULL:{
          jj_consume_token(tNULL);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(tPC);
      } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
      }
    } finally {
      trace_return("instruccion");
    }
}

  static final public void inst_leer() throws ParseException {
    trace_call("inst_leer");
    try {

      jj_consume_token(tGET);
      jj_consume_token(tAPAR);
      lista_ids();
      jj_consume_token(tCPAR);
    } finally {
      trace_return("inst_leer");
    }
}

  static final public void inst_escribir() throws ParseException {
    trace_call("inst_escribir");
    try {

      jj_consume_token(tPUT);
      jj_consume_token(tAPAR);
      lista_una_o_mas_exps();
      jj_consume_token(tCPAR);
    } finally {
      trace_return("inst_escribir");
    }
}

  static final public void inst_escribir_linea() throws ParseException {
    trace_call("inst_escribir_linea");
    try {

      jj_consume_token(tPUTLINE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAPAR:{
        jj_consume_token(tAPAR);
        lista_una_o_mas_exps();
        jj_consume_token(tCPAR);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }

    } finally {
      trace_return("inst_escribir_linea");
    }
}

  static final public void inst_invocacion_o_asignacion() throws ParseException {
    trace_call("inst_invocacion_o_asignacion");
    try {

      primario();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tASIGN:{
        jj_consume_token(tASIGN);
        expresion();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
    } finally {
      trace_return("inst_invocacion_o_asignacion");
    }
}

  static final public void inst_if() throws ParseException {
    trace_call("inst_if");
    try {

      jj_consume_token(tIF);
      expresion();
      jj_consume_token(tTHEN);
      label_6:
      while (true) {
        instruccion();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tCHARCONST:
        case tINTCONST:
        case tTRUE:
        case tFALSE:
        case tSTRING:
        case tAPAR:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tINT2CHAR:
        case tCHAR2INT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_6;
        }
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tELSIF:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_7;
        }
        jj_consume_token(tELSIF);
        expresion();
        jj_consume_token(tTHEN);
        label_8:
        while (true) {
          instruccion();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tNULL:
          case tRETURN:
          case tCHARCONST:
          case tINTCONST:
          case tTRUE:
          case tFALSE:
          case tSTRING:
          case tAPAR:
          case tSKIPLINE:
          case tGET:
          case tPUTLINE:
          case tPUT:
          case tINT2CHAR:
          case tCHAR2INT:
          case tIF:
          case tWHILE:
          case tID:{
            ;
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            break label_8;
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSE:{
        jj_consume_token(tELSE);
        label_9:
        while (true) {
          instruccion();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tNULL:
          case tRETURN:
          case tCHARCONST:
          case tINTCONST:
          case tTRUE:
          case tFALSE:
          case tSTRING:
          case tAPAR:
          case tSKIPLINE:
          case tGET:
          case tPUTLINE:
          case tPUT:
          case tINT2CHAR:
          case tCHAR2INT:
          case tIF:
          case tWHILE:
          case tID:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_9;
          }
        }
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(tEND);
      jj_consume_token(tIF);
    } finally {
      trace_return("inst_if");
    }
}

  static final public void inst_while() throws ParseException {
    trace_call("inst_while");
    try {

      jj_consume_token(tWHILE);
      expresion();
      jj_consume_token(tLOOP);
      label_10:
      while (true) {
        instruccion();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tCHARCONST:
        case tINTCONST:
        case tTRUE:
        case tFALSE:
        case tSTRING:
        case tAPAR:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tINT2CHAR:
        case tCHAR2INT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(tEND);
      jj_consume_token(tLOOP);
    } finally {
      trace_return("inst_while");
    }
}

  static final public void inst_return() throws ParseException {
    trace_call("inst_return");
    try {

      jj_consume_token(tRETURN);
      expresion();
    } finally {
      trace_return("inst_return");
    }
}

  static final public void expresion() throws ParseException {
    trace_call("expresion");
    try {

      relacion();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAND:
        case tOR:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tAND:{
          jj_consume_token(tAND);
          break;
          }
        case tOR:{
          jj_consume_token(tOR);
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        relacion();
      }
    } finally {
      trace_return("expresion");
    }
}

  static final public void relacion() throws ParseException {
    trace_call("relacion");
    try {

      expresion_simple();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLT:
      case tGT:
      case tEQ:
      case tNE:
      case tLE:
      case tGE:{
        operador_relacional();
        expresion_simple();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
    } finally {
      trace_return("relacion");
    }
}

  static final public void operador_relacional() throws ParseException {
    trace_call("operador_relacional");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tEQ:{
        jj_consume_token(tEQ);
        break;
        }
      case tNE:{
        jj_consume_token(tNE);
        break;
        }
      case tLT:{
        jj_consume_token(tLT);
        break;
        }
      case tLE:{
        jj_consume_token(tLE);
        break;
        }
      case tGT:{
        jj_consume_token(tGT);
        break;
        }
      case tGE:{
        jj_consume_token(tGE);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("operador_relacional");
    }
}

  static final public void expresion_simple() throws ParseException {
    trace_call("expresion_simple");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:
      case tMINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPLUS:{
          jj_consume_token(tPLUS);
          break;
          }
        case tMINUS:{
          jj_consume_token(tMINUS);
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      termino();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPLUS:
        case tMINUS:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tPLUS:{
          jj_consume_token(tPLUS);
          break;
          }
        case tMINUS:{
          jj_consume_token(tMINUS);
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        termino();
      }
    } finally {
      trace_return("expresion_simple");
    }
}

  static final public void termino() throws ParseException {
    trace_call("termino");
    try {

      factor();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tTIMES:
        case tDIV:
        case tMOD:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_13;
        }
        operador_multiplicativo();
        factor();
      }
    } finally {
      trace_return("termino");
    }
}

  static final public void operador_multiplicativo() throws ParseException {
    trace_call("operador_multiplicativo");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tTIMES:{
        jj_consume_token(tTIMES);
        break;
        }
      case tMOD:{
        jj_consume_token(tMOD);
        break;
        }
      case tDIV:{
        jj_consume_token(tDIV);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("operador_multiplicativo");
    }
}

  static final public void factor() throws ParseException {
    trace_call("factor");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCHARCONST:
      case tINTCONST:
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tAPAR:
      case tINT2CHAR:
      case tCHAR2INT:
      case tID:{
        primario();
        break;
        }
      case tNOT:{
        jj_consume_token(tNOT);
        primario();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
}

  static final public void primario() throws ParseException {
    trace_call("primario");
    try {

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAPAR:{
        jj_consume_token(tAPAR);
        expresion();
        jj_consume_token(tCPAR);
        break;
        }
      case tINT2CHAR:{
        jj_consume_token(tINT2CHAR);
        jj_consume_token(tAPAR);
        expresion();
        jj_consume_token(tCPAR);
        break;
        }
      case tCHAR2INT:{
        jj_consume_token(tCHAR2INT);
        jj_consume_token(tAPAR);
        expresion();
        jj_consume_token(tCPAR);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        if (jj_2_2(2)) {
          jj_consume_token(tID);
          jj_consume_token(tAPAR);
          lista_una_o_mas_exps();
          jj_consume_token(tCPAR);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tID:{
            jj_consume_token(tID);
            break;
            }
          case tCHARCONST:
          case tINTCONST:
          case tTRUE:
          case tFALSE:
          case tSTRING:{
            tipo_constante();
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("primario");
    }
}

  static final public void lista_una_o_mas_exps() throws ParseException {
    trace_call("lista_una_o_mas_exps");
    try {

      label_14:
      while (true) {
        expresion();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tCOMA:{
            ;
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            break label_15;
          }
          jj_consume_token(tCOMA);
          expresion();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCHARCONST:
        case tINTCONST:
        case tTRUE:
        case tFALSE:
        case tSTRING:
        case tNOT:
        case tPLUS:
        case tMINUS:
        case tAPAR:
        case tINT2CHAR:
        case tCHAR2INT:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_14;
        }
      }
    } finally {
      trace_return("lista_una_o_mas_exps");
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tAPAR)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tCOMA)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x6000000,0x0,0x0,0x740000,0x700000,0xf800000,0x0,0x18000,0xf8a0000,0x0,0x18000,0x18000,0x0,0x18000,0xf8a0000,0x0,0xf8a0000,0x1000,0x0,0x0,0x0,0x0,0x0,0xf8a0000,0x0,0x800,0xf8a0000,0x0,0xf8a0000,0xf8a0000,0x0,0xf8a0000,0x30000000,0x30000000,0x0,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x4f800000,0x0,0xf800000,0x0,0xcf800000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x1,0x1,0x0,0x0,0x0,0x10000000,0x0,0x147f0400,0x10000000,0x0,0x0,0x10000000,0x0,0x147f0400,0x10000000,0x147f0400,0x0,0x10000000,0x40000400,0x40000400,0x40000400,0x1000,0x147f0400,0x400,0x0,0x147f0400,0x1000000,0x147f0400,0x147f0400,0x800000,0x147f0400,0x0,0x0,0x1f8,0x1f8,0x1,0x1,0x1,0x1,0x206,0x206,0x10300400,0x300400,0x10000000,0x4000,0x10300401,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 47; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  static private int trace_indent = 0;
/** Enable tracing. */
  static final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
	 trace_enabled = false;
  }

  static protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  static protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  static protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  static protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
