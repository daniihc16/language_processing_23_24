/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

//...

public class alike implements alikeConstants {
   //...

   public static void main(String[] args) {
           alike parser = null;

           try {
                   if(args.length == 0) {
                           parser = new alike(System.in);
                   }
                   else {
                           parser = new alike(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el símbolo inicial de la gramática
                   parser.Programa();
                   //...
                   System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
           }
           catch (java.io.FileNotFoundException e) {
                   System.err.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                   System.err.println("LEX_ERROR: " + e.getMessage());
           }
           catch (ParseException e) {
                        System.err.println("PARSE_ERROR: " + e.getMessage());
           }
           //...
   }

  static final public void boolconst() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tTRUE:{
      jj_consume_token(tTRUE);
      break;
      }
    case tFALSE:{
      jj_consume_token(tFALSE);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void tipo_dato() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCHAR:
    case tBOOL:
    case tINT:{
      tipo_base();
      break;
      }
    case tARRAY:{
      jj_consume_token(tARRAY);
      jj_consume_token(tAPAR);
      jj_consume_token(tINTCONST);
      jj_consume_token(tRANGE);
      jj_consume_token(tINTCONST);
      jj_consume_token(tCPAR);
      jj_consume_token(tOF);
      tipo_base();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void tipo_base() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCHAR:{
      jj_consume_token(tCHAR);
      break;
      }
    case tBOOL:{
      jj_consume_token(tBOOL);
      break;
      }
    case tINT:{
      jj_consume_token(tINT);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void tipo_constante() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCHARCONST:{
      jj_consume_token(tCHARCONST);
      break;
      }
    case tINTCONST:{
      jj_consume_token(tINTCONST);
      break;
      }
    case tTRUE:
    case tFALSE:{
      boolconst();
      break;
      }
    case tSTRING:{
      jj_consume_token(tSTRING);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void Programa() throws ParseException {
    cabecera_procedimiento();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPROC:
    case tFUNC:{
      declaracion_procs_funcs();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(tBEGIN);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tRETURN:
      case tCHARCONST:
      case tINTCONST:
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tAPAR:
      case tSKIPLINE:
      case tGET:
      case tPUTLINE:
      case tPUT:
      case tINT2CHAR:
      case tCHAR2INT:
      case tIF:
      case tWHILE:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_1;
      }
      instruccion();
    }
    jj_consume_token(tEND);
    jj_consume_token(tPC);
    jj_consume_token(0);
}

  static final public void declaracion_variables() throws ParseException {
    label_2:
    while (true) {
      declaracion_var();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
    }
}

  static final public void declaracion_var() throws ParseException {
    lista_ids();
    jj_consume_token(tDP);
    tipo_dato();
    jj_consume_token(tPC);
}

  static final public void declaracion_procs_funcs() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROC:{
        declaracion_proc();
        break;
        }
      case tFUNC:{
        declaracion_func();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROC:
      case tFUNC:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
    }
}

  static final public void declaracion_proc() throws ParseException {
    cabecera_procedimiento();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPROC:
    case tFUNC:{
      declaracion_procs_funcs();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(tBEGIN);
    label_4:
    while (true) {
      instruccion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tRETURN:
      case tCHARCONST:
      case tINTCONST:
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tAPAR:
      case tSKIPLINE:
      case tGET:
      case tPUTLINE:
      case tPUT:
      case tINT2CHAR:
      case tCHAR2INT:
      case tIF:
      case tWHILE:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tPC);
}

  static final public void declaracion_func() throws ParseException {
    cabecera_funcion();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tID:{
      declaracion_variables();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(tBEGIN);
    label_5:
    while (true) {
      instruccion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tRETURN:
      case tCHARCONST:
      case tINTCONST:
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tAPAR:
      case tSKIPLINE:
      case tGET:
      case tPUTLINE:
      case tPUT:
      case tINT2CHAR:
      case tCHAR2INT:
      case tIF:
      case tWHILE:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tPC);
}

  static final public void declaracion_param() throws ParseException {
    lista_ids();
    jj_consume_token(tDP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tREF:{
      jj_consume_token(tREF);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    tipo_dato();
}

  static final public void lista_ids() throws ParseException {
    if (jj_2_1(2)) {
      jj_consume_token(tID);
      jj_consume_token(tCOMA);
      lista_ids();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        jj_consume_token(tID);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void cabecera_procedimiento() throws ParseException {
    jj_consume_token(tPROC);
    jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:
    case 62:{
      parametros_formales();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(tIS);
}

  static final public void cabecera_funcion() throws ParseException {
    jj_consume_token(tFUNC);
    jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:
    case 62:{
      parametros_formales();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(tRETURN);
    tipo_dato();
    jj_consume_token(tIS);
}

  static final public void parametros_formales() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:{
      jj_consume_token(tAPAR);
      label_6:
      while (true) {
        declaracion_param();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tPC:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_7;
          }
          jj_consume_token(tPC);
          declaracion_param();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(tCPAR);
      break;
      }
    case 62:{
      jj_consume_token(62);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void instruccion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tGET:{
      inst_leer();
      break;
      }
    case tSKIPLINE:{
      jj_consume_token(tSKIPLINE);
      break;
      }
    case tPUT:{
      inst_escribir();
      break;
      }
    case tPUTLINE:{
      inst_escribir_linea();
      break;
      }
    case tCHARCONST:
    case tINTCONST:
    case tTRUE:
    case tFALSE:
    case tSTRING:
    case tAPAR:
    case tINT2CHAR:
    case tCHAR2INT:
    case tID:{
      inst_invocacion_o_asignacion();
      break;
      }
    case tIF:{
      inst_if();
      break;
      }
    case tWHILE:{
      inst_while();
      break;
      }
    case tRETURN:{
      inst_return();
      break;
      }
    case tNULL:{
      jj_consume_token(tNULL);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(tPC);
}

  static final public void inst_leer() throws ParseException {
    jj_consume_token(tGET);
    jj_consume_token(tAPAR);
    lista_ids();
    jj_consume_token(tCPAR);
}

  static final public void inst_escribir() throws ParseException {
    jj_consume_token(tPUT);
    jj_consume_token(tAPAR);
    lista_una_o_mas_exps();
    jj_consume_token(tCPAR);
}

  static final public void inst_escribir_linea() throws ParseException {
    jj_consume_token(tPUTLINE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:{
      jj_consume_token(tAPAR);
      lista_una_o_mas_exps();
      jj_consume_token(tCPAR);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }

}

  static final public void inst_invocacion_o_asignacion() throws ParseException {
    primario();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tASIGN:{
      jj_consume_token(tASIGN);
      expresion();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
}

  static final public void inst_if() throws ParseException {
    jj_consume_token(tIF);
    expresion();
    jj_consume_token(tTHEN);
    label_8:
    while (true) {
      instruccion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tRETURN:
      case tCHARCONST:
      case tINTCONST:
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tAPAR:
      case tSKIPLINE:
      case tGET:
      case tPUTLINE:
      case tPUT:
      case tINT2CHAR:
      case tCHAR2INT:
      case tIF:
      case tWHILE:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSIF:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_9;
      }
      jj_consume_token(tELSIF);
      expresion();
      jj_consume_token(tTHEN);
      label_10:
      while (true) {
        instruccion();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tCHARCONST:
        case tINTCONST:
        case tTRUE:
        case tFALSE:
        case tSTRING:
        case tAPAR:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tINT2CHAR:
        case tCHAR2INT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tELSE:{
      jj_consume_token(tELSE);
      label_11:
      while (true) {
        instruccion();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tCHARCONST:
        case tINTCONST:
        case tTRUE:
        case tFALSE:
        case tSTRING:
        case tAPAR:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tINT2CHAR:
        case tCHAR2INT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_11;
        }
      }
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(tEND);
    jj_consume_token(tIF);
}

  static final public void inst_while() throws ParseException {
    jj_consume_token(tWHILE);
    expresion();
    jj_consume_token(tLOOP);
    label_12:
    while (true) {
      instruccion();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tRETURN:
      case tCHARCONST:
      case tINTCONST:
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tAPAR:
      case tSKIPLINE:
      case tGET:
      case tPUTLINE:
      case tPUT:
      case tINT2CHAR:
      case tCHAR2INT:
      case tIF:
      case tWHILE:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_12;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tLOOP);
}

  static final public void inst_return() throws ParseException {
    jj_consume_token(tRETURN);
    expresion();
}

  static final public void expresion() throws ParseException {
    relacion();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:
      case tOR:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:{
        jj_consume_token(tAND);
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      relacion();
    }
}

  static final public void relacion() throws ParseException {
    expresion_simple();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLT:
    case tGT:
    case tEQ:
    case tNE:
    case tLE:
    case tGE:{
      operador_relacional();
      expresion_simple();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
}

  static final public void operador_relacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQ:{
      jj_consume_token(tEQ);
      break;
      }
    case tNE:{
      jj_consume_token(tNE);
      break;
      }
    case tLT:{
      jj_consume_token(tLT);
      break;
      }
    case tLE:{
      jj_consume_token(tLE);
      break;
      }
    case tGT:{
      jj_consume_token(tGT);
      break;
      }
    case tGE:{
      jj_consume_token(tGE);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void expresion_simple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPLUS:
    case tMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    termino();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:
      case tMINUS:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termino();
    }
}

  static final public void termino() throws ParseException {
    factor();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tTIMES:
      case tDIV:
      case tMOD:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_15;
      }
      operador_multiplicativo();
      factor();
    }
}

  static final public void operador_multiplicativo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tTIMES:{
      jj_consume_token(tTIMES);
      break;
      }
    case tMOD:{
      jj_consume_token(tMOD);
      break;
      }
    case tDIV:{
      jj_consume_token(tDIV);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCHARCONST:
    case tINTCONST:
    case tTRUE:
    case tFALSE:
    case tSTRING:
    case tAPAR:
    case tINT2CHAR:
    case tCHAR2INT:
    case tID:{
      primario();
      break;
      }
    case tNOT:{
      jj_consume_token(tNOT);
      primario();
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void primario() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:{
      jj_consume_token(tAPAR);
      expresion();
      jj_consume_token(tCPAR);
      break;
      }
    case tINT2CHAR:{
      jj_consume_token(tINT2CHAR);
      jj_consume_token(tAPAR);
      expresion();
      jj_consume_token(tCPAR);
      break;
      }
    case tCHAR2INT:{
      jj_consume_token(tCHAR2INT);
      jj_consume_token(tAPAR);
      expresion();
      jj_consume_token(tCPAR);
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      if (jj_2_2(2)) {
        jj_consume_token(tID);
        jj_consume_token(tAPAR);
        lista_una_o_mas_exps();
        jj_consume_token(tCPAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tID:{
          jj_consume_token(tID);
          break;
          }
        case tCHARCONST:
        case tINTCONST:
        case tTRUE:
        case tFALSE:
        case tSTRING:{
          tipo_constante();
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  static final public void lista_una_o_mas_exps() throws ParseException {
    label_16:
    while (true) {
      expresion();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMA:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_17;
        }
        jj_consume_token(tCOMA);
        expresion();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCHARCONST:
      case tINTCONST:
      case tTRUE:
      case tFALSE:
      case tSTRING:
      case tNOT:
      case tPLUS:
      case tMINUS:
      case tAPAR:
      case tINT2CHAR:
      case tCHAR2INT:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_16;
      }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tCOMA)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tAPAR)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x6000000,0x740000,0x700000,0xf800000,0x0,0x18000,0xf8a0000,0x0,0x18000,0x18000,0x0,0x18000,0xf8a0000,0x0,0xf8a0000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0xf8a0000,0x0,0x800,0xf8a0000,0x0,0xf8a0000,0xf8a0000,0x0,0xf8a0000,0x30000000,0x30000000,0x0,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x4f800000,0x0,0xf800000,0x0,0xcf800000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x10000000,0x0,0x147f0400,0x10000000,0x0,0x0,0x10000000,0x0,0x147f0400,0x10000000,0x147f0400,0x0,0x10000000,0x40000400,0x40000400,0x1000,0x10000000,0x40000400,0x147f0400,0x400,0x0,0x147f0400,0x1000000,0x147f0400,0x147f0400,0x800000,0x147f0400,0x0,0x0,0x1f8,0x1f8,0x1,0x1,0x1,0x1,0x206,0x206,0x10300400,0x300400,0x10000000,0x4000,0x10300401,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 46; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 46; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
