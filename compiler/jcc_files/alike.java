/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import java.util.*;
import lib.tools.TypeValue;
import lib.tools.SemanticFunctions;
import lib.tools.exceptions.*;


public class alike implements alikeConstants {
   //...
   public static SymbolTable st = new SymbolTable();
   public static void main(String[] args) {
        alike parser = null;

        try {
                if(args.length == 0) {
                        parser = new alike(System.in);
                }
                else {
                        parser = new alike(new java.io.FileInputStream(args[0]));
                }
                //Programa es el símbolo inicial de la gramática
                parser.Programa();
                //...
                System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
        }
        catch (java.io.FileNotFoundException e) {
                System.err.println ("Fichero " + args[0] + " no encontrado.");
        }
        catch (TokenMgrError e) {
                System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
                 System.err.println("PARSE_ERROR: " + e.getMessage());
        }
        //...
   }

  static final public Token boolconst() throws ParseException {Token bool_const = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tTRUE:{
      bool_const = jj_consume_token(tTRUE);
      break;
      }
    case tFALSE:{
      bool_const = jj_consume_token(tFALSE);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return bool_const;}
    throw new Error("Missing return statement in function");
}

// Devuelve el array con los símbolos de los identificadores con su tipo
// @param ids: lista de identificadores a los que se les va a asignar un tipo
// @param ref: token que indica si el tipo es por referencia
  static final public ArrayList<Symbol> tipo_dato(ArrayList<String> ids, boolean isRef) throws ParseException {ArrayList<Symbol> t;
    Token neg1 = null, neg2 = null, min, max;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCHAR:
    case tBOOL:
    case tINT:{
      t = tipo_base(ids, isRef);
{if ("" != null) return t;}
      break;
      }
    case tARRAY:{
      jj_consume_token(tARRAY);
      jj_consume_token(tAPAR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMINUS:{
        neg1 = jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      min = jj_consume_token(tINTCONST);
      jj_consume_token(tRANGE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMINUS:{
        neg2 = jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      max = jj_consume_token(tINTCONST);
      jj_consume_token(tCPAR);
      jj_consume_token(tOF);
      t = tipo_base(ids, isRef);
{if ("" != null) return SemanticFunctions.simbolos_con_tipo(ids, isRef, t, min, max, neg1, neg2);}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Devuelve el array con los símbolos de los identificadores con su tipo
// @param ids: lista de identificadores a los que se les va a asignar un tipo
// @param isRef: indica si el tipo es por referencia
  static final public ArrayList<Symbol> tipo_base(ArrayList<String> ids, boolean isRef) throws ParseException {Symbol t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCHAR:{
      jj_consume_token(tCHAR);
t = new SymbolChar("");
      break;
      }
    case tBOOL:{
      jj_consume_token(tBOOL);
t = new SymbolBool("");
      break;
      }
    case tINT:{
      jj_consume_token(tINT);
t = new SymbolInt("");
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return SemanticFunctions.ids_simbolos_base(ids, isRef, t);}
    throw new Error("Missing return statement in function");
}

  static final public TypeValue tipo_constante() throws ParseException {Token char_const = null;
    Token int_const = null;
    Token bool_const = null;
    Token string_const = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCHARCONST:{
      char_const = jj_consume_token(tCHARCONST);
{if ("" != null) return new TypeValue(Symbol.Types.CHAR, char_const.image.charAt(0));}
      break;
      }
    case tINTCONST:{
      int_const = jj_consume_token(tINTCONST);
{if ("" != null) return new TypeValue(Symbol.Types.INT, Integer.parseInt(int_const.image));}
      break;
      }
    case tTRUE:
    case tFALSE:{
      bool_const = boolconst();
{if ("" != null) return new TypeValue(Symbol.Types.BOOL, Boolean.parseBoolean(bool_const.image));}
      break;
      }
    case tSTRING:{
      string_const = jj_consume_token(tSTRING);
{if ("" != null) return new TypeValue(Symbol.Types.STRING, string_const.image);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void Programa() throws ParseException {SymbolProcedure proc_main = new SymbolProcedure("__NOT_A_PROCEDURE__", new ArrayList<Symbol>());
    ArrayList<Symbol> vars = null;
    try {
      proc_main = cabecera_procedimiento();
SemanticFunctions.insertSymbol(st, proc_main);
                        st.setMainProc(proc_main.name);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        vars = declaracion_variables();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
if (vars != null) {
                                for (Symbol var : vars) {
                                        SemanticFunctions.insertSymbol(st, var);
                                }
                        } else {
                                vars = new ArrayList<Symbol>();
                        }
                        System.out.println("Nuevo s\u00edmbolo: " + st.toString());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROC:
      case tFUNC:{
        declaracion_procs_funcs();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(tBEGIN);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_1;
        }
        instruccion(proc_main);
      }
      jj_consume_token(tEND);
      jj_consume_token(tPC);
      jj_consume_token(0);
    } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
    }
}

  static final public ArrayList<Symbol> declaracion_variables() throws ParseException {ArrayList<Symbol> vars = new ArrayList<Symbol>();
    ArrayList<Symbol> var_list = null;
    label_2:
    while (true) {
      var_list = declaracion_var();
for (Symbol var: var_list) vars.add(var);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
    }
{if ("" != null) return vars;}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Symbol> declaracion_var() throws ParseException {ArrayList<String> ids;
    ArrayList<Symbol> vars;
    try {
      // tipo_dato devuelve el símbolo
                      ids = lista_ids();
      jj_consume_token(tDP);
      vars = tipo_dato(ids, false);
      jj_consume_token(tPC);
{if ("" != null) return vars;}
    } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
                {if ("" != null) return new ArrayList<Symbol>();}
    }
    throw new Error("Missing return statement in function");
}

  static final public void declaracion_procs_funcs() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROC:{
        declaracion_proc();
        break;
        }
      case tFUNC:{
        declaracion_func();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROC:
      case tFUNC:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
    }
}

// Reconoce la declaración de un procedimiento
// Inserta el símbolo del procedimiento en la tabla de símbolos
// Inserta bloque en la tabla de símbolos
// Inserta los parámetros y variables en la tabla de símbolos
  static final public void declaracion_proc() throws ParseException {SymbolProcedure proc = null;
    ArrayList<Symbol> vars = null;
    try {
      proc = cabecera_procedimiento();
SemanticFunctions.newProcBlock(st, proc);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        vars = declaracion_variables();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
if (vars != null) {
                                for (Symbol var : vars) SemanticFunctions.insertSymbol(st, var);
                        } else {
                                vars = new ArrayList<Symbol>();
                        }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROC:
      case tFUNC:{
        declaracion_procs_funcs();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(tBEGIN);
      label_4:
      while (true) {
        instruccion(proc);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(tEND);
      jj_consume_token(tPC);
System.out.println("Procedimiento reconocido: " + st.toString());
                        st.removeBlock();
    } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
    }
}

// Reconoce la declaración de una función
// Inserta el símbolo de la función en la tabla de símbolos
// Inserta bloque en la tabla de símbolos
// Inserta los parámetros y variables en la tabla de símbolos
  static final public void declaracion_func() throws ParseException {ArrayList<Symbol> vars = new ArrayList<Symbol>();
    SymbolFunction func = null;
    try {
      func = cabecera_funcion();
SemanticFunctions.newFuncBlock(st, func);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        vars = declaracion_variables();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
if (vars != null) for (Symbol var : vars) SemanticFunctions.insertSymbol(st, var);
      jj_consume_token(tBEGIN);
      label_5:
      while (true) {
        instruccion(func);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
      }
      jj_consume_token(tEND);
      jj_consume_token(tPC);
System.out.println("Funci\u00f3n reconocida: " + st.toString());
                        st.removeBlock();
    } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
    }
}

  static final public ArrayList<Symbol> declaracion_param() throws ParseException {ArrayList<String> ids;
    ArrayList<Symbol> ids_con_tipo;
    Token ref = null;
    ids = lista_ids();
    jj_consume_token(tDP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tREF:{
      ref = jj_consume_token(tREF);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    ids_con_tipo = tipo_dato(ids, ref != null);
{if ("" != null) return ids_con_tipo;}
    throw new Error("Missing return statement in function");
}

// Devuelve la lista de identificadores reconocidos
  static final public ArrayList<String> lista_ids() throws ParseException {ArrayList<String> ids = new ArrayList<String>();
    ArrayList<String> resto_ids = null;
    Token id;
    if (jj_2_1(2)) {
      id = jj_consume_token(tID);
      jj_consume_token(tCOMA);
      resto_ids = lista_ids();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        id = jj_consume_token(tID);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
ids.add(id.image);
                if (resto_ids != null) {
                        for (String sid : resto_ids) ids.add(sid);
                }
                {if ("" != null) return ids;}
    throw new Error("Missing return statement in function");
}

// Devuelve el símbolo del procedimiento con los parámetros
  static final public SymbolProcedure cabecera_procedimiento() throws ParseException {Token id_proc;
    ArrayList<Symbol> proc_params = null;
    jj_consume_token(tPROC);
    id_proc = jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:
    case 62:{
      proc_params = parametros_formales();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(tIS);
{if ("" != null) return new SymbolProcedure(id_proc.image, proc_params);}
    throw new Error("Missing return statement in function");
}

// Devuelve el símbolo de la función con los parámetros
  static final public SymbolFunction cabecera_funcion() throws ParseException {Token id_func;
    ArrayList<Symbol> func_params = null;
    ArrayList<Symbol> returnType = null;
    jj_consume_token(tFUNC);
    id_func = jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:
    case 62:{
      func_params = parametros_formales();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(tRETURN);
    returnType = tipo_base(new ArrayList<String>(Arrays.asList("returnType")), false);
    jj_consume_token(tIS);
if (returnType.get(0).type != Symbol.Types.INT && returnType.get(0).type != Symbol.Types.BOOL && returnType.get(0).type != Symbol.Types.CHAR) {
                        ArrayList<Symbol.Types> expectedTypes = new ArrayList<Symbol.Types>();
                        expectedTypes.add(Symbol.Types.INT);
                        expectedTypes.add(Symbol.Types.CHAR);
                        expectedTypes.add(Symbol.Types.BOOL);
                        UnexpectedTypeException.getMessage(expectedTypes, returnType.get(0).type, id_func.beginLine, id_func.beginColumn);
                }
                {if ("" != null) return new SymbolFunction(id_func.image, func_params, returnType.get(0).type);}
    throw new Error("Missing return statement in function");
}

// Devuelve el array con los símbolos de los identificadores con su tipo
  static final public ArrayList<Symbol> parametros_formales() throws ParseException {ArrayList<Symbol> params = new ArrayList<Symbol>();
    ArrayList<Symbol> ps, resto_p;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAPAR:{
        jj_consume_token(tAPAR);
        ps = declaracion_param();
for (Symbol p :  ps) params.add(p);
        resto_p = lista_parametros_formales();
for (Symbol p :  resto_p) params.add(p);
        jj_consume_token(tCPAR);
        break;
        }
      case 62:{
        jj_consume_token(62);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
    }
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<Symbol> lista_parametros_formales() throws ParseException {ArrayList<Symbol> params = new ArrayList<Symbol>();
    ArrayList<Symbol> ps, resto_p;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPC:{
      jj_consume_token(tPC);
      ps = declaracion_param();
for (Symbol p :  ps) params.add(p);
      resto_p = lista_parametros_formales();
for (Symbol p :  resto_p) params.add(p);
{if ("" != null) return params;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
{if ("" != null) return params;}
    }
    throw new Error("Missing return statement in function");
}

//where es el símbolo de la función o el procedimiento en la que se encuentra la instrucción
//Usado para comprobar que el return tiene el tipo correcto y no hay return en procedimientos
  static final public void instruccion(Symbol where) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tGET:{
        inst_leer();
        break;
        }
      case tSKIPLINE:{
        jj_consume_token(tSKIPLINE);
        break;
        }
      case tPUT:{
        inst_escribir();
        break;
        }
      case tPUTLINE:{
        inst_escribir_linea();
        break;
        }
      case tID:{
        inst_invocacion_o_asignacion();
        break;
        }
      case tIF:{
        inst_if(where);
        break;
        }
      case tWHILE:{
        inst_while(where);
        break;
        }
      case tRETURN:{
        inst_return(where);
        break;
        }
      case tNULL:{
        jj_consume_token(tNULL);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(tPC);
    } catch (ParseException e) {
System.err.println("PARSE_ERROR: " + e.getMessage());

                // Reconocer hasta el token <tPC>
                while (true) {
                        Token t = getNextToken();
                        if (t.kind == tPC) break;
                }
    }
}

  static final public void inst_leer() throws ParseException {ArrayList<TypeValue> exps = null;
        Token get = null;       // Token usado para que en caso de error se pueda mostrar la línea y columna

    get = jj_consume_token(tGET);
    jj_consume_token(tAPAR);
    exps = lista_una_o_mas_exps();
    jj_consume_token(tCPAR);
SemanticFunctions.inst_leer(exps, get);
                System.out.println("Encontrada instrucci\u00f3n get correcta");
}

  static final public void inst_escribir() throws ParseException {ArrayList<TypeValue> exps = new ArrayList<TypeValue>();
        Token put = null;
    put = jj_consume_token(tPUT);
    jj_consume_token(tAPAR);
    exps = lista_una_o_mas_exps();
    jj_consume_token(tCPAR);
SemanticFunctions.inst_escribir(exps, put.beginLine, put.beginColumn);
                System.out.println("Encontrada instrucci\u00f3n put correcta");
}

  static final public void inst_escribir_linea() throws ParseException {ArrayList<TypeValue> exps = new ArrayList<TypeValue>();
        Token put = null;
    put = jj_consume_token(tPUTLINE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:{
      jj_consume_token(tAPAR);
      exps = lista_una_o_mas_exps();
      jj_consume_token(tCPAR);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
SemanticFunctions.inst_escribir(exps, put.beginLine, put.beginColumn);
                System.out.println("Encontrada instrucci\u00f3n put_line correcta");
                // Añadir un salto de línea al final en la generación de código

}

  static final public void inst_invocacion_o_asignacion() throws ParseException {TypeValue p = null, exp = null;
        Token asign = null;
    p = invoc_o_asign_primario();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tASIGN:{
      asign = jj_consume_token(tASIGN);
      exp = expresion();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
SemanticFunctions.inst_invocacion_o_asignacion(p, exp, asign);
                if (asign != null) System.out.println("Invocaci\u00f3n correcta en l\u00ednea: " + String.valueOf(asign.beginLine));
                else System.out.println("Invocaci\u00f3n correcta");
}

  static final public void inst_if(Symbol sf) throws ParseException {TypeValue expif = null, expelsif = null;
        Token tif = null, elsif = null;
    // debe haber por lo menos una instrucción en el bloque condicional (null en casos donde no se haga nada)
        tif = jj_consume_token(tIF);
    expif = expresion();
    jj_consume_token(tTHEN);
SemanticFunctions.inst_if(expif, tif);
    label_6:
    while (true) {
      instruccion(sf);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tRETURN:
      case tSKIPLINE:
      case tGET:
      case tPUTLINE:
      case tPUT:
      case tIF:
      case tWHILE:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_6;
      }
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSIF:{
        ;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        break label_7;
      }
      elsif = jj_consume_token(tELSIF);
      expelsif = expresion();
      jj_consume_token(tTHEN);
SemanticFunctions.inst_if(expelsif, elsif);
      label_8:
      while (true) {
        instruccion(sf);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_8;
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tELSE:{
      jj_consume_token(tELSE);
      label_9:
      while (true) {
        instruccion(sf);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tNULL:
        case tRETURN:
        case tSKIPLINE:
        case tGET:
        case tPUTLINE:
        case tPUT:
        case tIF:
        case tWHILE:
        case tID:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_9;
        }
      }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    jj_consume_token(tEND);
    jj_consume_token(tIF);
}

  static final public void inst_while(Symbol sf) throws ParseException {TypeValue exp = null;
        Token twhile = null;
    twhile = jj_consume_token(tWHILE);
    exp = expresion();
    jj_consume_token(tLOOP);
    label_10:
    while (true) {
      instruccion(sf);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tNULL:
      case tRETURN:
      case tSKIPLINE:
      case tGET:
      case tPUTLINE:
      case tPUT:
      case tIF:
      case tWHILE:
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tLOOP);
SemanticFunctions.inst_while(exp, twhile);
                System.out.println("Encontrada instrucci\u00f3n while correcta en l\u00ednea: " + String.valueOf(twhile.beginLine));
}

  static final public void inst_return(Symbol sf) throws ParseException {TypeValue exp = null;
        Token treturn = null;
    treturn = jj_consume_token(tRETURN);
    exp = expresion();
SemanticFunctions.inst_return(exp, sf, treturn);
                System.out.println("Encontrada instrucci\u00f3n return correcta en l\u00ednea: " + String.valueOf(treturn.beginLine));
}

  static final public TypeValue expresion() throws ParseException {TypeValue prel = null, srel = null;
    Token op = null;
        // "and" y "or" son asociativos a la izqda. pero mezclados, no está definida su asociatividad, por lo que hay que usar paréntesis que definan la prioridad de las operaciones.

    prel = relacion();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAND:
    case tOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:{
        label_11:
        while (true) {
          op = jj_consume_token(tAND);
          srel = relacion();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tAND:{
            ;
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            break label_11;
          }
        }
        break;
        }
      case tOR:{
        label_12:
        while (true) {
          op = jj_consume_token(tOR);
          srel = relacion();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tOR:{
            ;
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            break label_12;
          }
        }
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
{if ("" != null) return SemanticFunctions.expresion(prel, op, srel, tAND, tOR);}
    throw new Error("Missing return statement in function");
}

  static final public TypeValue relacion() throws ParseException {TypeValue exp1 = null, exp2 = null;
    Token op = null;
    exp1 = expresion_simple();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLT:
    case tGT:
    case tEQ:
    case tNE:
    case tLE:
    case tGE:{
      op = operador_relacional();
      exp2 = expresion_simple();
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
{if ("" != null) return SemanticFunctions.relacion(exp1, op, exp2, tEQ, tNE, tLT, tLE, tGT, tGE);}
    throw new Error("Missing return statement in function");
}

  static final public Token operador_relacional() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQ:{
      t = jj_consume_token(tEQ);
      break;
      }
    case tNE:{
      t = jj_consume_token(tNE);
      break;
      }
    case tLT:{
      t = jj_consume_token(tLT);
      break;
      }
    case tLE:{
      t = jj_consume_token(tLE);
      break;
      }
    case tGT:{
      t = jj_consume_token(tGT);
      break;
      }
    case tGE:{
      t = jj_consume_token(tGE);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public TypeValue expresion_simple() throws ParseException {TypeValue term = null, term_resultante = null;
    Token op = null, ops = null;
    // HACER TESTS DE CADA UNA DE LAS CONDICIONES QUE SE DAN

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPLUS:
    case tMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        ops = jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        ops = jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    term = termino();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPLUS:
    case tMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        op = jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        op = jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term_resultante = una_o_mas_expresiones_simples();
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
{if ("" != null) return SemanticFunctions.expresion_simple(ops, term, op, term_resultante, tPLUS, tMINUS);}
    throw new Error("Missing return statement in function");
}

  static final public TypeValue una_o_mas_expresiones_simples() throws ParseException {TypeValue term = null, term_resultante = null;
    Token op = null, ops = null;
    term = termino();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPLUS:
    case tMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        op = jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        op = jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term_resultante = una_o_mas_expresiones_simples();
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      ;
    }
{if ("" != null) return SemanticFunctions.una_o_mas_expresiones_simples(term, op, term_resultante, tPLUS, tMINUS);}
    throw new Error("Missing return statement in function");
}

  static final public TypeValue termino() throws ParseException {TypeValue fact = null, fact_resultante = null;
    Token op = null;
    fact = factor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tTIMES:
    case tDIV:
    case tMOD:{
      op = operador_multiplicativo();
      fact_resultante = lista_una_o_mas_terminos();
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
{if ("" != null) return SemanticFunctions.termino(fact, op, fact_resultante, tTIMES, tDIV, tMOD);}
    throw new Error("Missing return statement in function");
}

  static final public TypeValue lista_una_o_mas_terminos() throws ParseException {TypeValue fact = null, fact_resultante = null;
    Token op = null;
    fact = factor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tTIMES:
    case tDIV:
    case tMOD:{
      op = operador_multiplicativo();
      fact_resultante = lista_una_o_mas_terminos();
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      ;
    }
{if ("" != null) return SemanticFunctions.termino(fact, op, fact_resultante, tTIMES, tDIV, tMOD);}
    throw new Error("Missing return statement in function");
}

  static final public Token operador_multiplicativo() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tTIMES:{
      t = jj_consume_token(tTIMES);
      break;
      }
    case tDIV:{
      t = jj_consume_token(tDIV);
      break;
      }
    case tMOD:{
      t = jj_consume_token(tMOD);
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  static final public TypeValue factor() throws ParseException {TypeValue p = null;
        Token not = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCHARCONST:
    case tINTCONST:
    case tTRUE:
    case tFALSE:
    case tSTRING:
    case tAPAR:
    case tINT2CHAR:
    case tCHAR2INT:
    case tID:{
      p = primario();
{if ("" != null) return p;}
      break;
      }
    case tNOT:{
      not = jj_consume_token(tNOT);
      p = primario();
{if ("" != null) return SemanticFunctions.not_primario(p, not.beginLine, not.beginColumn);}
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public TypeValue primario() throws ParseException {TypeValue exp = null;
    Token id = null, fnToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tAPAR:{
      jj_consume_token(tAPAR);
      exp = expresion();
      jj_consume_token(tCPAR);
{if ("" != null) return exp;}
      break;
      }
    case tINT2CHAR:{
      fnToken = jj_consume_token(tINT2CHAR);
      jj_consume_token(tAPAR);
      exp = expresion();
      jj_consume_token(tCPAR);
// System.out.println(exp.value);
    if (exp.type == Symbol.Types.INT) {
                // en gen. de código comprobar que el valor es mayor que 0 ?? 
         {if ("" != null) return new TypeValue(Symbol.Types.CHAR, exp.value);}
    } else {
         UnexpectedTypeException.getMessage(Symbol.Types.INT, exp.type, fnToken.beginLine, fnToken.beginColumn);
    }
      break;
      }
    case tCHAR2INT:{
      fnToken = jj_consume_token(tCHAR2INT);
      jj_consume_token(tAPAR);
      exp = expresion();
      jj_consume_token(tCPAR);
if (exp.type == Symbol.Types.CHAR) {
                 {if ("" != null) return new TypeValue(Symbol.Types.INT, String.valueOf(exp.value));}
         } else {
                 UnexpectedTypeException.getMessage(Symbol.Types.CHAR, exp.type, fnToken.beginLine, fnToken.beginColumn);
         }
      break;
      }
    case tID:{
      exp = invoc_o_asign_primario();
{if ("" != null) return exp;}
      break;
      }
    case tCHARCONST:
    case tINTCONST:
    case tTRUE:
    case tFALSE:
    case tSTRING:{
      exp = tipo_constante();
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public TypeValue invoc_o_asign_primario() throws ParseException {TypeValue exp = null;
    Token id = null;
        ArrayList<TypeValue> exps = null;
    if (jj_2_2(2)) {
      id = jj_consume_token(tID);
      jj_consume_token(tAPAR);
      exps = lista_una_o_mas_exps();
      jj_consume_token(tCPAR);
{if ("" != null) return SemanticFunctions.invoc_func_o_comp_array(id, exps, st);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        id = jj_consume_token(tID);
{if ("" != null) return SemanticFunctions.var_o_func_sin_params(id, st);}
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<TypeValue> lista_una_o_mas_exps() throws ParseException {ArrayList<TypeValue> exps = new ArrayList<TypeValue>();
    TypeValue exp;
    exp = expresion();
    exps = lista_exps_ll();
exps.add(0, exp);
         {if ("" != null) return exps;}
    throw new Error("Missing return statement in function");
}

  static final public ArrayList<TypeValue> lista_exps_ll() throws ParseException {ArrayList<TypeValue> exps = new ArrayList<TypeValue>();
    TypeValue exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCOMA:{
      jj_consume_token(tCOMA);
      exp = expresion();
      exps = lista_exps_ll();
exps.add(0, exp);
         {if ("" != null) return exps;}
      break;
      }
    default:
      jj_la1[50] = jj_gen;
{if ("" != null) return exps;}
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tAPAR)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(tID)) return true;
    if (jj_scan_token(tCOMA)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[51];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x6000000,0x0,0x0,0x740000,0x700000,0xf800000,0x0,0x18000,0xa0000,0x0,0x18000,0x18000,0x0,0x18000,0xa0000,0x0,0xa0000,0x1000,0x0,0x0,0x0,0x0,0x0,0xa0000,0x0,0x800,0xa0000,0x0,0xa0000,0xa0000,0x0,0xa0000,0x10000000,0x20000000,0x30000000,0x30000000,0x0,0x0,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x4f800000,0xf800000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x1,0x1,0x0,0x0,0x0,0x10000000,0x0,0x144f0000,0x10000000,0x0,0x0,0x10000000,0x0,0x144f0000,0x10000000,0x144f0000,0x0,0x10000000,0x40000400,0x40000400,0x40000400,0x1000,0x144f0000,0x400,0x0,0x144f0000,0x1000000,0x144f0000,0x144f0000,0x800000,0x144f0000,0x0,0x0,0x0,0x0,0x1f8,0x1f8,0x1,0x1,0x1,0x1,0x1,0x1,0x206,0x206,0x206,0x10300400,0x10300400,0x10000000,0x4000,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 51; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 51; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 51; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 51; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 51; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 51; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 51; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
